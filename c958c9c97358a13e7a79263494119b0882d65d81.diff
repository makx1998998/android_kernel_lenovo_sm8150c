diff --git a/drivers/cpufreq/cpu_input_boost.c b/drivers/cpufreq/cpu_input_boost.c
index 0a45606c28a6..dd460edf4042 100644
--- a/drivers/cpufreq/cpu_input_boost.c
+++ b/drivers/cpufreq/cpu_input_boost.c
@@ -56,6 +56,7 @@ static short max_stune_boost_offset __read_mostly = CONFIG_MAX_BOOST_STUNE_OFFSE
 static short flex_stune_boost_offset __read_mostly = CONFIG_FLEX_BOOST_STUNE_OFFSET;
 static unsigned int stune_boost_extender_ms __read_mostly = CONFIG_STUNE_BOOST_EXTENDER_MS;
 static unsigned int max_stune_boost_extender_ms __read_mostly = CONFIG_MAX_STUNE_BOOST_EXTENDER_MS;
+static unsigned int default_level_stune_boost __read_mostly = 15;
 
 module_param(dynamic_stune_boost, short, 0644);
 module_param(input_stune_boost_offset, short, 0644);
@@ -92,6 +93,7 @@ enum {
 	FLEX_BOOST,
 	CLUSTER1_BOOST,
 	CLUSTER2_BOOST,
+	CORE_BOOST,
 	CLUSTER1_WAKE_BOOST,
 	CLUSTER2_WAKE_BOOST,
 	INPUT_STUNE_BOOST,
@@ -111,12 +113,14 @@ struct boost_drv {
 	struct workqueue_struct *wq_w_fstu;
 	struct workqueue_struct *wq_w_mstu;
 	struct workqueue_struct *wq_w_gpu;
+	struct workqueue_struct *wq_core;
 	struct work_struct input_stune_boost;
 	struct work_struct max_stune_boost;
 	struct work_struct flex_stune_boost;
 	struct work_struct gpu_boost;
 	struct delayed_work input_unboost;
 	struct delayed_work flex_unboost;
+	struct delayed_work core_unboost;
 	struct delayed_work cluster1_unboost;
 	struct delayed_work cluster2_unboost;
 	struct delayed_work input_stune_unboost;
@@ -137,6 +141,7 @@ struct boost_drv {
 	unsigned int max_boost_ms;
 	unsigned long state;
 	unsigned long stune_state;
+	unsigned int cpu;
 };
 
 static void input_unboost_worker(struct work_struct *work);
@@ -150,12 +155,15 @@ static void input_stune_boost_worker(struct work_struct *work);
 static void max_stune_boost_worker(struct work_struct *work);
 static void flex_stune_boost_worker(struct work_struct *work);
 static void gpu_boost_worker(struct work_struct *work);
+static void core_unboost_worker(struct work_struct *work);
 
 static struct boost_drv boost_drv_g __read_mostly = {
 	.input_unboost = __DELAYED_WORK_INITIALIZER(boost_drv_g.input_unboost,
-						    input_unboost_worker, 0),
+						  input_unboost_worker, 0),
 	.flex_unboost = __DELAYED_WORK_INITIALIZER(boost_drv_g.flex_unboost,
 						  flex_unboost_worker, 0),
+	.core_unboost = __DELAYED_WORK_INITIALIZER(boost_drv_g.core_unboost,
+						  core_unboost_worker, 0),
 	.cluster1_unboost = __DELAYED_WORK_INITIALIZER(boost_drv_g.cluster1_unboost,
 						  cluster1_unboost_worker, 0),
 	.cluster2_unboost = __DELAYED_WORK_INITIALIZER(boost_drv_g.cluster2_unboost,
@@ -239,6 +247,7 @@ static void clear_stune_boost(struct boost_drv *b, u32 BIT, int slot)
 {
 	if (test_and_clear_bit(BIT, &b->stune_state)) {
 		reset_stune_boost("top-app", slot);
+		set_stune_boost_default("top-app", &default_level_stune_boost);
 	}
 }
 
@@ -317,32 +326,58 @@ static void __cpu_input_boost_kick(struct boost_drv *b)
 static void __cpu_input_boost_kick_cluster1(struct boost_drv *b,
 				       unsigned int duration_ms)
 {
+	b->max_boost_ms = duration_ms;
 	if (!mod_delayed_work(b->wq_cl1, &b->cluster1_unboost,
 			      msecs_to_jiffies(duration_ms))) {
 		set_bit(CLUSTER1_BOOST, &b->state);
 		wake_up(&b->boost_waitq);
 	}
-	b->max_boost_ms = duration_ms;
 	queue_work(b->wq_w_mstu, &b->max_stune_boost);
 }
 
+static void __cpu_input_boost_kick_core(struct boost_drv *b,
+				       unsigned int duration_ms, unsigned int cpu)
+{
+	b->max_boost_ms = duration_ms;
+	b->cpu = cpu;
+	if (!mod_delayed_work(b->wq_core, &b->core_unboost,
+			      msecs_to_jiffies(duration_ms))) {
+		set_bit(CORE_BOOST, &b->state);
+		wake_up(&b->boost_waitq);
+	}
+	
+}
+
 static void __cpu_input_boost_kick_cluster2(struct boost_drv *b,
 				       unsigned int duration_ms)
 {
+	b->max_boost_ms = duration_ms;
 	if (!mod_delayed_work(b->wq_cl2, &b->cluster2_unboost,
 			msecs_to_jiffies(duration_ms))) {
 		set_bit(CLUSTER2_BOOST, &b->state);
 		wake_up(&b->boost_waitq);
 	}
-	b->max_boost_ms = duration_ms;
 	if (!test_bit(CLUSTER1_BOOST, &b->state) || !test_bit(CLUSTER1_WAKE_BOOST, &b->state))
 		queue_work(b->wq_w_mstu, &b->max_stune_boost);
 }
 
+void cpu_input_boost_kick_core(unsigned int duration_ms, unsigned int cpu)
+{
+	unsigned long boost_jiffies = msecs_to_jiffies(duration_ms);
+	struct boost_drv *b = &boost_drv_g;
+
+	if (duration_ms == 0)
+		return;
+
+	if (!test_bit(SCREEN_ON, &b->state))
+		return;
+
+	__cpu_input_boost_kick_core(b, duration_ms, cpu);
+}
+
 void cpu_input_boost_kick_cluster1(unsigned int duration_ms)
 {
 	unsigned long boost_jiffies = msecs_to_jiffies(duration_ms);
-	unsigned long curr_expires, new_expires;
 	struct boost_drv *b = &boost_drv_g;
 
 	if (duration_ms == 0)
@@ -357,7 +392,6 @@ void cpu_input_boost_kick_cluster1(unsigned int duration_ms)
 void cpu_input_boost_kick_cluster2(unsigned int duration_ms)
 {
 	unsigned long boost_jiffies = msecs_to_jiffies(duration_ms);
-	unsigned long curr_expires, new_expires;
 	struct boost_drv *b = &boost_drv_g;
 
 	if (little_only || duration_ms == 0)
@@ -372,24 +406,24 @@ void cpu_input_boost_kick_cluster2(unsigned int duration_ms)
 static void __cpu_input_boost_kick_cluster1_wake(struct boost_drv *b,
 				       unsigned int duration_ms)
 {
+	b->max_boost_ms = duration_ms;
 	if (!mod_delayed_work(b->wq_cl1, &b->cluster1_unboost,
 			msecs_to_jiffies(duration_ms))) {
 		set_bit(CLUSTER1_WAKE_BOOST, &b->state);
 		wake_up(&b->boost_waitq);
 	}	
-	b->max_boost_ms = duration_ms;
 	queue_work(b->wq_w_mstu, &b->max_stune_boost);
 }
 
 static void __cpu_input_boost_kick_cluster2_wake(struct boost_drv *b,
 				       unsigned int duration_ms)
 {
+	b->max_boost_ms = duration_ms;
 	if (!mod_delayed_work(b->wq_cl2, &b->cluster2_unboost,
 			msecs_to_jiffies(duration_ms))) {
 		set_bit(CLUSTER2_WAKE_BOOST, &b->state);
 		wake_up(&b->boost_waitq);
 	}
-	b->max_boost_ms = duration_ms;
 	if (!test_bit(CLUSTER1_WAKE_BOOST, &b->state) || !test_bit(CLUSTER1_BOOST, &b->state))
 		queue_work(b->wq_w_mstu, &b->max_stune_boost);
 }
@@ -397,7 +431,6 @@ static void __cpu_input_boost_kick_cluster2_wake(struct boost_drv *b,
 void cpu_input_boost_kick_cluster1_wake(unsigned int duration_ms)
 {
 	unsigned long boost_jiffies = msecs_to_jiffies(duration_ms);
-	unsigned long curr_expires, new_expires;
 	struct boost_drv *b = &boost_drv_g;
 
 	if (duration_ms == 0)
@@ -409,7 +442,6 @@ void cpu_input_boost_kick_cluster1_wake(unsigned int duration_ms)
 void cpu_input_boost_kick_cluster2_wake(unsigned int duration_ms)
 {
 	unsigned long boost_jiffies = msecs_to_jiffies(duration_ms);
-	unsigned long curr_expires, new_expires;
 	struct boost_drv *b = &boost_drv_g;
 
 	if (duration_ms == 0)
@@ -448,6 +480,15 @@ static void input_unboost_worker(struct work_struct *work)
 	wake_up(&b->boost_waitq);
 }
 
+static void core_unboost_worker(struct work_struct *work)
+{
+	struct boost_drv *b = container_of(to_delayed_work(work),
+					   typeof(*b), core_unboost);
+
+	clear_bit(CORE_BOOST, &b->state);
+	wake_up(&b->boost_waitq);
+}
+
 static void cluster1_unboost_worker(struct work_struct *work)
 {
 	struct boost_drv *b = container_of(to_delayed_work(work),
@@ -569,6 +610,12 @@ static int cpu_notifier_cb(struct notifier_block *nb, unsigned long action,
 		return NOTIFY_OK;
 	}
 
+	if (test_bit(CORE_BOOST, &b->state) && (policy->cpu == b->cpu)) {
+		b->cpu = 8;
+		policy->min = policy->max;
+		return NOTIFY_OK;
+	}
+
 	/* Boost CPU to max frequency for max boost */
 	if (test_bit(CLUSTER1_BOOST, &b->state) && (policy->cpu < 4)) {
 		policy->min = get_max_boost_freq(policy);
@@ -667,6 +714,7 @@ static int fb_notifier_cb(struct notifier_block *nb, unsigned long action,
 		clear_bit(SCREEN_ON, &b->state);
 		clear_bit(INPUT_BOOST, &b->state);
 		clear_bit(FLEX_BOOST, &b->state);
+		clear_bit(CORE_BOOST, &b->state);
 		clear_bit(CLUSTER1_BOOST, &b->state);
 		clear_bit(CLUSTER2_BOOST, &b->state);
 		clear_bit(CLUSTER1_WAKE_BOOST, &b->state);
@@ -835,6 +883,12 @@ static int __init cpu_input_boost_init(void)
 		return ret;
 	}
 
+	b->wq_core = alloc_workqueue("cpu_input_boost_wq_core", WQ_HIGHPRI, 0);
+	if (!b->wq_core) {
+		ret = -ENOMEM;
+		return ret;
+	}
+
 	b->wq_w_gpu = alloc_workqueue("cpu_input_boost_wq_w_gpu", WQ_HIGHPRI, 0);
 	if (!b->wq_w_gpu) {
 		ret = -ENOMEM;
diff --git a/fs/exec.c b/fs/exec.c
index 7e67e12adc16..0cd6f5489d80 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1719,6 +1719,8 @@ static int exec_binprm(struct linux_binprm *bprm)
 		ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
 		proc_exec_connector(current);
 	}
+	if (strcmp(current->comm, "surfaceflinger") == 0)
+		current->is_surfaceflinger = true;
 
 	return ret;
 }
diff --git a/include/linux/cpu_input_boost.h b/include/linux/cpu_input_boost.h
index 09496be7af55..0bef5480cc6a 100644
--- a/include/linux/cpu_input_boost.h
+++ b/include/linux/cpu_input_boost.h
@@ -7,6 +7,7 @@
 
 #ifdef CONFIG_CPU_INPUT_BOOST
 void cpu_input_boost_kick_flex(void);
+void cpu_input_boost_kick_core(unsigned int duration_ms, unsigned int cpu);
 void cpu_input_boost_kick_cluster1(unsigned int duration_ms);
 void cpu_input_boost_kick_cluster2(unsigned int duration_ms);
 void cpu_input_boost_kick_cluster1_wake(unsigned int duration_ms);
@@ -15,6 +16,9 @@ void cpu_input_boost_kick_cluster2_wake(unsigned int duration_ms);
 static inline void cpu_input_boost_kick_flex(void)
 {
 }
+void cpu_input_boost_kick_core(unsigned int duration_ms, unsigned int cpu)
+{
+}
 void cpu_input_boost_kick_cluster1(unsigned int duration_ms)
 {
 }
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 6a4799b42789..6a0ebb96d219 100755
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -757,6 +757,7 @@ struct task_struct {
 
 	/* add for fd leak debug */
 	bool dump_fd_leak;
+	bool is_surfaceflinger;
 
         //huruihuan add for kill task in D status
 	unsigned int kill_flag;
@@ -2013,5 +2014,26 @@ static inline void set_wake_up_idle(bool enabled)
 int do_stune_boost(char *st_name, int boost, int *slot);
 int do_stune_sched_boost(char *st_name, int *slot);
 int reset_stune_boost(char *st_name, int slot);
+void set_stune_boost_default(char *st_name, int *boost_default);
+#else /* !CONFIG_DYNAMIC_STUNE_BOOST */
+static inline int do_stune_boost(char *st_name, int boost, int *slot)
+{
+	return 0;
+}
+
+static inline int do_stune_sched_boost(char *st_name, int *slot)
+{
+	return 0;
+}
+
+static inline int reset_stune_boost(char *st_name, int slot)
+{
+	return 0;
+}
+
+static inline void set_stune_boost_default(char *st_name, int *boost_default)
+{
+	return 0;
+}
 #endif /* CONFIG_DYNAMIC_STUNE_BOOST */
 #endif
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index cf016b557c6b..b5037211d96e 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2500,6 +2500,8 @@ int sched_fork(unsigned long clone_flags, struct task_struct *p)
 	 */
 	p->prio = current->normal_prio;
 
+	p->is_surfaceflinger = false;
+
 	/*
 	 * Revert to default priority/policy on fork if requested.
 	 */
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index a056da585e45..2257b5b5f10c 100755
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -10,6 +10,18 @@
 #include <linux/slab.h>
 #include <linux/irq_work.h>
 #include "tune.h"
+#ifdef CONFIG_CPU_INPUT_BOOST
+#include <linux/cpu_input_boost.h>
+#endif
+#ifdef CONFIG_DEVFREQ_BOOST
+#include <linux/devfreq_boost.h>
+#endif
+#ifdef CONFIG_DEVFREQ_BOOST_DDR
+#include <linux/devfreq_boost_ddr.h>
+#endif
+#ifdef CONFIG_DEVFREQ_BOOST_GPU
+#include <linux/devfreq_boost_gpu.h>
+#endif
 
 #include "walt.h"
 #ifdef CONFIG_OPCHAIN
@@ -1766,6 +1778,12 @@ static int rt_energy_aware_wake_cpu(struct task_struct *task)
 #ifdef CONFIG_OPCHAIN
 	bool best_cpu_is_claimed = false;
 #endif
+	if (task->is_surfaceflinger && tutil > 90) {
+		cpu_input_boost_kick_core(1000, task->cpu);
+		devfreq_boost_kick_max(DEVFREQ_MSM_CPUBW, 1000);
+		devfreq_boost_ddr_kick_max(DEVFREQ_MSM_DDRBW, 1000);
+		devfreq_boost_gpu_kick_max(DEVFREQ_MSM_GPUBW, 1000);	
+	}
 
 	rcu_read_lock();
 
diff --git a/kernel/sched/tune.c b/kernel/sched/tune.c
index 4a98242e8739..c0044f7b355f 100644
--- a/kernel/sched/tune.c
+++ b/kernel/sched/tune.c
@@ -1050,6 +1050,18 @@ int do_stune_boost(char *st_name, int boost, int *slot)
 	return _do_stune_boost(st, boost, slot);
 }
 
+void set_stune_boost_default(char *st_name, int *boost_default)
+{
+	struct schedtune *st = getSchedtune(st_name);
+
+	if (!st)
+		return -EINVAL;
+
+	mutex_lock(&stune_boost_mutex);
+	st->boost_default = *boost_default ;
+	mutex_unlock(&stune_boost_mutex);
+}
+
 #endif /* CONFIG_DYNAMIC_STUNE_BOOST */
 
 
