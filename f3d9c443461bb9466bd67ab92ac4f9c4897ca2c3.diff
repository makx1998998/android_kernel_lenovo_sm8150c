diff --git a/arch/arm64/configs/smurf_defconfig b/arch/arm64/configs/smurf_defconfig
index acf05d3d4d80..784579966706 100644
--- a/arch/arm64/configs/smurf_defconfig
+++ b/arch/arm64/configs/smurf_defconfig
@@ -739,7 +739,6 @@ CONFIG_FLEX_BOOST_FREQ_GOLD=1171200
 CONFIG_MAX_BOOST_FREQ_LP=1785600
 CONFIG_MAX_BOOST_FREQ_PERF=2419200
 CONFIG_MAX_BOOST_FREQ_GOLD=2841600
-CONFIG_DYNAMIC_STUNE_BOOST=y
 CONFIG_INPUT_BOOST_STUNE_OFFSET=30
 CONFIG_FLEX_BOOST_STUNE_OFFSET=-20
 CONFIG_MAX_BOOST_STUNE_OFFSET=35
diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index c53d45d48c6f..a32e8bb7e3f1 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -341,7 +341,6 @@ config INPUT_BOOST_FREQ_GOLD
 
 config INPUT_BOOST_STUNE_OFFSET
 	int "Foreground app schedtune input boost offset"
-	depends on DYNAMIC_STUNE_BOOST
 	default "25"
 	help
 	  Input boost level for the EAS SchedTune boosting system. This
@@ -407,7 +406,6 @@ config FLEX_BOOST_DURATION_MS
 
 config FLEX_BOOST_STUNE_OFFSET
 	int "Foreground app schedtune max boost offset"
-	depends on DYNAMIC_STUNE_BOOST
 	default "-20"
 	help
 	  Maximum boost level for the EAS SchedTune boosting system. This
@@ -419,7 +417,6 @@ config FLEX_BOOST_STUNE_OFFSET
 
 config MAX_BOOST_STUNE_OFFSET
 	int "Foreground app schedtune max boost offset"
-	depends on DYNAMIC_STUNE_BOOST
 	default "50"
 	help
 	  Maximum boost level for the EAS SchedTune boosting system. This
@@ -431,21 +428,18 @@ config MAX_BOOST_STUNE_OFFSET
 
 config  GPU_BOOST_FREQ
 	int "Boost GPU to given frequency"
-	depends on DYNAMIC_STUNE_BOOST
 	default '345'
 	help
 	  Boosts GPU to given frequency
 
 config  GPU_MIN_FREQ
 	int "MIN GPU frequency"
-	depends on DYNAMIC_STUNE_BOOST
 	default '257'
 	help
 	  MIN GPU frequency
 
 config INPUT_THREAD_PRIORITY
 	int "Input hread priority"
-	depends on DYNAMIC_STUNE_BOOST
 	default "25"
 
 config MAX_BOOST_FREQ_LP
@@ -468,21 +462,18 @@ config MAX_BOOST_FREQ_LP
 
 config STUNE_BOOST_EXTENDER_MS
 	int "Foreground app schedtune max extend duration"
-	depends on DYNAMIC_STUNE_BOOST
 	default '250'
 	help
 	  Extends the stune boost duration to a given timespan
 
 config MAX_STUNE_BOOST_EXTENDER_MS
 	int "Foreground app schedtune max extend duration"
-	depends on DYNAMIC_STUNE_BOOST
 	default '500'
 	help
 	  Extends the stune boost duration to a given timespan
 
 config GPU_BOOST_EXTENDER_MS
 	int "Boost GPU for 3000 ms"
-	depends on DYNAMIC_STUNE_BOOST
 	default '500'
 	help
 	  Boosts GPU to given frequency for 3000 ms
diff --git a/drivers/cpufreq/cpu-boost.c b/drivers/cpufreq/cpu-boost.c
index 809bd3c5a566..24faef0acdf5 100644
--- a/drivers/cpufreq/cpu-boost.c
+++ b/drivers/cpufreq/cpu-boost.c
@@ -39,13 +39,6 @@ static bool input_boost_enabled;
 static unsigned int input_boost_ms = 40;
 module_param(input_boost_ms, uint, 0644);
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-static int dynamic_stune_boost;
-module_param(dynamic_stune_boost, uint, 0644);
-static bool stune_boost_active;
-static int boost_slot;
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 static unsigned int sched_boost_on_input;
 module_param(sched_boost_on_input, uint, 0644);
 
@@ -183,14 +176,6 @@ static void do_input_boost_rem(struct work_struct *work)
 		i_sync_info->input_boost_min = 0;
 	}
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	/* Reset dynamic stune boost value to the default value */
-	if (stune_boost_active) {
-		reset_stune_boost("top-app", boost_slot);
-		stune_boost_active = false;
-	}
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 	/* Update policies for all online CPUs */
 	update_policy_online();
 
@@ -237,13 +222,6 @@ static void do_input_boost(struct work_struct *work)
 			sched_boost_active = true;
 	}
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	/* Set dynamic stune boost value */
-	ret = do_stune_boost("top-app", dynamic_stune_boost, &boost_slot);
-	if (!ret)
-		stune_boost_active = true;
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 	queue_delayed_work(cpu_boost_wq, &input_boost_rem,
 					msecs_to_jiffies(input_boost_ms));
 }
@@ -299,11 +277,6 @@ static int cpuboost_input_connect(struct input_handler *handler,
 
 static void cpuboost_input_disconnect(struct input_handle *handle)
 {
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	/* Reset dynamic stune boost value to the default value */
-	reset_stune_boost("top-app", boost_slot);
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 	input_close_device(handle);
 	input_unregister_handle(handle);
 	kfree(handle);
diff --git a/drivers/devfreq/Kconfig b/drivers/devfreq/Kconfig
index 7aa24b7b74b8..48329fa9eac7 100644
--- a/drivers/devfreq/Kconfig
+++ b/drivers/devfreq/Kconfig
@@ -329,7 +329,6 @@ config DEVFREQ_MSM_CPUBW_BOOST_FREQ_LOW
 
 config DEVFREQ_THREAD_PRIORITY
 	int "Input hread priority"
-	depends on DYNAMIC_STUNE_BOOST
 	default "25"
 
 endif
@@ -368,7 +367,6 @@ config DEVFREQ_MSM_DDRBW_BOOST_FREQ_LOW
 
 config DEVFREQ_DDR_THREAD_PRIORITY
 	int "Input hread priority"
-	depends on DYNAMIC_STUNE_BOOST
 	default "25"
 
 endif
@@ -407,7 +405,6 @@ config DEVFREQ_MSM_GPUBW_BOOST_FREQ_LOW
 
 config DEVFREQ_GPU_THREAD_PRIORITY
 	int "Input hread priority"
-	depends on DYNAMIC_STUNE_BOOST
 	default "25"
 
 endif
diff --git a/init/Kconfig b/init/Kconfig
index 2dab1e71ff8c..e735b56ee042 100755
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1090,15 +1090,6 @@ config SCHED_TUNE
 
 	  If unsure, say N.
 
-config DYNAMIC_STUNE_BOOST
-	bool "Dynamic SchedTune boosting support"
-	depends on SCHED_TUNE
-	help
-	  This option extends the SchedTune framework and provides APIs to
-	  activate and reset SchedTune boosting from anywhere in the kernel.
-
-	  If unsure, say N.
-
 config DEFAULT_USE_ENERGY_AWARE
 	bool "Default to enabling the Energy Aware Scheduler feature"
 	default n
diff --git a/kernel/sched/boost.c b/kernel/sched/boost.c
index 4ed99279aebe..2620ae3740c9 100644
--- a/kernel/sched/boost.c
+++ b/kernel/sched/boost.c
@@ -61,10 +61,6 @@ static void set_boost_policy(int type)
 	boost_policy = SCHED_BOOST_ON_ALL;
 }
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-static int boost_slot;
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
-
 static bool verify_boost_params(int type)
 {
 	return type >= RESTRAINED_BOOST_DISABLE && type <= RESTRAINED_BOOST;
@@ -218,14 +214,6 @@ static void sched_boost_disable_all(void)
 
 static void _sched_set_boost(int type)
 {
-
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	if (type > 0)
-		do_stune_sched_boost("top-app", &boost_slot);
-	else
-		reset_stune_boost("top-app", boost_slot);
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
-
 	if (type == 0)
 		sched_boost_disable_all();
 	else if (type > 0)
diff --git a/kernel/sched/tune.c b/kernel/sched/tune.c
index c0044f7b355f..6114d6cfa8cc 100644
--- a/kernel/sched/tune.c
+++ b/kernel/sched/tune.c
@@ -7,7 +7,6 @@
 #include <linux/slab.h>
 
 #include <trace/events/sched.h>
-#include <linux/list.h>
 
 #include "sched.h"
 #include "tune.h"
@@ -15,18 +14,6 @@
 bool schedtune_initialized = false;
 extern struct reciprocal_value schedtune_spc_rdiv;
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-#define DYNAMIC_BOOST_SLOTS_COUNT 3
-static DEFINE_MUTEX(boost_slot_mutex);
-static DEFINE_MUTEX(stune_boost_mutex);
-static struct schedtune *getSchedtune(char *st_name);
-static int dynamic_boost(struct schedtune *st, int boost);
-struct boost_slot {
-	struct list_head list;
-	int idx;
-};
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 /*
  * EAS scheduler tunables for task groups.
  */
@@ -67,26 +54,6 @@ struct schedtune {
 	 * towards idle CPUs */
 	int prefer_idle;
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	/*
-	 * This tracks the default boost value and is used to restore
-	 * the value when Dynamic SchedTune Boost is reset.
-	 */
-	int boost_default;
-
-	/* Sched Boost value for tasks on that SchedTune CGroup */
-	int sched_boost;
-
-	/* Number of ongoing boosts for this SchedTune CGroup */
-	int boost_count;
-
-	/* Lists of active and available boost slots */
-	struct boost_slot active_boost_slots;
-	struct boost_slot available_boost_slots;
-
-	/* Array of tracked boost values of each slot */
-	int slot_boost[DYNAMIC_BOOST_SLOTS_COUNT];
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
 };
 
 static inline struct schedtune *css_st(struct cgroup_subsys_state *css)
@@ -123,20 +90,6 @@ root_schedtune = {
 	.colocate_update_disabled = false,
 #endif
 	.prefer_idle = 0,
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	.boost_default = 0,
-	.sched_boost = 0,
-	.boost_count = 0,
-	.active_boost_slots = {
-		.list = LIST_HEAD_INIT(root_schedtune.active_boost_slots.list),
-		.idx = 0,
-	},
-	.available_boost_slots = {
-		.list = LIST_HEAD_INIT(root_schedtune.available_boost_slots.list),
-		.idx = 0,
-	},
-	.slot_boost = {0},
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
 };
 
 /*
@@ -601,6 +554,13 @@ static void schedtune_attach(struct cgroup_taskset *tset)
 }
 #endif
 
+static int
+boost_write_dummy(struct cgroup_subsys_state *css, struct cftype *cft,
+	    s64 boost)
+{
+	return 0;
+}
+
 static int
 boost_write(struct cgroup_subsys_state *css, struct cftype *cft,
 	    s64 boost)
@@ -618,71 +578,12 @@ boost_write(struct cgroup_subsys_state *css, struct cftype *cft,
 
 	st->boost = boost;
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	st->boost_default = boost;
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 	/* Update CPU boost */
 	schedtune_boostgroup_update(st->idx, st->boost);
 
 	return 0;
 }
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-static s64
-sched_boost_read(struct cgroup_subsys_state *css, struct cftype *cft)
-{
-	struct schedtune *st = css_st(css);
-
-	return st->sched_boost;
-}
-
-static int
-sched_boost_write(struct cgroup_subsys_state *css, struct cftype *cft,
-	    s64 sched_boost)
-{
-	struct schedtune *st = css_st(css);
-	st->sched_boost = sched_boost;
-
-	return 0;
-}
-
-static void
-boost_slots_init(struct schedtune *st)
-{
-	int i;
-	struct boost_slot *slot;
-
-	/* Initialize boost slots */
-	INIT_LIST_HEAD(&(st->active_boost_slots.list));
-	INIT_LIST_HEAD(&(st->available_boost_slots.list));
-
-	/* Populate available_boost_slots */
-	for (i = 0; i < DYNAMIC_BOOST_SLOTS_COUNT; ++i) {
-		slot = kmalloc(sizeof(*slot), GFP_KERNEL);
-		slot->idx = i;
-		list_add_tail(&(slot->list), &(st->available_boost_slots.list));
-	}
-}
-
-static void
-boost_slots_release(struct schedtune *st)
-{
-	struct boost_slot *slot, *next_slot;
-
-	list_for_each_entry_safe(slot, next_slot,
-				 &(st->available_boost_slots.list), list) {
-		list_del(&slot->list);
-		kfree(slot);
-	}
-	list_for_each_entry_safe(slot, next_slot,
-				 &(st->active_boost_slots.list), list) {
-		list_del(&slot->list);
-		kfree(slot);
-	}
-}
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
-
 static struct cftype files[] = {
 #ifdef CONFIG_SCHED_WALT
 	{
@@ -699,20 +600,13 @@ static struct cftype files[] = {
 	{
 		.name = "boost",
 		.read_s64 = boost_read,
-		.write_s64 = boost_write,
+		.write_s64 = boost_write_dummy,
 	},
 	{
 		.name = "prefer_idle",
 		.read_u64 = prefer_idle_read,
 		.write_u64 = prefer_idle_write,
 	},
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	{
-		.name = "sched_boost",
-		.read_s64 = sched_boost_read,
-		.write_s64 = sched_boost_write,
-	},
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
 	{ }	/* terminate */
 };
 
@@ -732,10 +626,6 @@ schedtune_boostgroup_init(struct schedtune *st)
 		bg->group[st->idx].tasks = 0;
 	}
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	boost_slots_init(st);
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
-
 	return 0;
 }
 
@@ -785,10 +675,6 @@ schedtune_css_alloc(struct cgroup_subsys_state *parent_css)
 static void
 schedtune_boostgroup_release(struct schedtune *st)
 {
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	/* Free dynamic boost slots */
-	boost_slots_release(st);
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
 	/* Reset this boost group */
 	schedtune_boostgroup_update(st->idx, 0);
 
@@ -834,7 +720,6 @@ schedtune_init_cgroups(void)
 	schedtune_initialized = true;
 }
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
 static struct schedtune *getSchedtune(char *st_name)
 {
 	int idx;
@@ -856,215 +741,16 @@ static struct schedtune *getSchedtune(char *st_name)
 	return NULL;
 }
 
-static int dynamic_boost(struct schedtune *st, int boost)
-{
-	int ret;
-	/* Backup boost_default */
-	int boost_default_backup = st->boost_default;
-
-	ret = boost_write(&st->css, NULL, boost);
-
-	/* Restore boost_default */
-	st->boost_default = boost_default_backup;
-
-	return ret;
-}
-
-static inline bool is_valid_boost_slot(int slot)
-{
-	return slot >= 0 && slot < DYNAMIC_BOOST_SLOTS_COUNT;
-}
-
-static int activate_boost_slot(struct schedtune *st, int boost, int *slot)
-{
-	int ret = 0;
-	struct boost_slot *curr_slot;
-	struct list_head *head;
-	*slot = -1;
-
-	mutex_lock(&boost_slot_mutex);
-
-	/* Check for slots in available_boost_slots */
-	if (list_empty(&(st->available_boost_slots.list))) {
-		ret = -EINVAL;
-		goto exit;
-	}
-
-	/*
-	 * Move one slot from available_boost_slots to active_boost_slots
-	 */
-
-	/* Get first slot from available_boost_slots */
-	head = &(st->available_boost_slots.list);
-	curr_slot = list_first_entry(head, struct boost_slot, list);
-
-	/* Store slot value and boost value*/
-	*slot = curr_slot->idx;
-	st->slot_boost[*slot] = boost;
-
-	/* Delete slot from available_boost_slots */
-	list_del(&curr_slot->list);
-	kfree(curr_slot);
-
-	/* Create new slot with same value at tail of active_boost_slots */
-	curr_slot = kmalloc(sizeof(*curr_slot), GFP_KERNEL);
-	curr_slot->idx = *slot;
-	list_add_tail(&(curr_slot->list),
-		&(st->active_boost_slots.list));
-
-exit:
-	mutex_unlock(&boost_slot_mutex);
-	return ret;
-}
-
-static int deactivate_boost_slot(struct schedtune *st, int slot)
-{
-	int ret = 0;
-	struct boost_slot *curr_slot, *next_slot;
-
-	mutex_lock(&boost_slot_mutex);
-
-	if (!is_valid_boost_slot(slot)) {
-		ret = -EINVAL;
-		goto exit;
-	}
-
-	/* Delete slot from active_boost_slots */
-	list_for_each_entry_safe(curr_slot, next_slot,
-				 &(st->active_boost_slots.list), list) {
-		if (curr_slot->idx == slot) {
-			st->slot_boost[slot] = 0;
-			list_del(&curr_slot->list);
-			kfree(curr_slot);
-
-			/* Create same slot at tail of available_boost_slots */
-			curr_slot = kmalloc(sizeof(*curr_slot), GFP_KERNEL);
-			curr_slot->idx = slot;
-			list_add_tail(&(curr_slot->list),
-				      &(st->available_boost_slots.list));
-
-			goto exit;
-		}
-	}
-
-	/* Reaching here means that we did not find the slot to delete */
-	ret = -EINVAL;
-
-exit:
-	mutex_unlock(&boost_slot_mutex);
-	return ret;
-}
-
-static int max_active_boost(struct schedtune *st)
-{
-	struct boost_slot *slot;
-	int max_boost;
-
-	mutex_lock(&boost_slot_mutex);
-	mutex_lock(&stune_boost_mutex);
-
-	/* Set initial value to default boost */
-	max_boost = st->boost_default;
-
-	/* Check for active boosts */
-	if (list_empty(&(st->active_boost_slots.list))) {
-		goto exit;
-	}
-
-	/* Get largest boost value */
-	list_for_each_entry(slot, &(st->active_boost_slots.list), list) {
-		int boost = st->slot_boost[slot->idx];
-		if (boost > max_boost)
-			max_boost = boost;
-	}
-
-exit:
-	mutex_unlock(&stune_boost_mutex);
-	mutex_unlock(&boost_slot_mutex);
-
-	return max_boost;
-}
-
-static int _do_stune_boost(struct schedtune *st, int boost, int *slot)
-{
-	int ret = 0;
-
-	/* Try to obtain boost slot */
-	ret = activate_boost_slot(st, boost, slot);
-
-	/* Check if boost slot obtained successfully */
-	if (ret)
-		return -EINVAL;
-
-	/* Boost if new value is greater than current */
-	mutex_lock(&stune_boost_mutex);
-	if (boost > st->boost)
-		ret = dynamic_boost(st, boost);
-	mutex_unlock(&stune_boost_mutex);
-
-	return ret;
-}
-
-int reset_stune_boost(char *st_name, int slot)
+void set_stune_boost(char *st_name, int boost)
 {
-	int ret = 0;
-	int boost = 0;
 	struct schedtune *st = getSchedtune(st_name);
 
 	if (!st)
 		return -EINVAL;
 
-	ret = deactivate_boost_slot(st, slot);
-	if (ret) {
-		return -EINVAL;
-	}
-	/* Find next largest active boost or reset to default */
-	boost = max_active_boost(st);
-
-	mutex_lock(&stune_boost_mutex);
-	/* Boost only if value changed */
-	if (boost != st->boost)
-		ret = dynamic_boost(st, boost);
-	mutex_unlock(&stune_boost_mutex);
-
-	return ret;
+	boost_write(&st->css, NULL, boost);
 }
 
-int do_stune_sched_boost(char *st_name, int *slot)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	return _do_stune_boost(st, st->sched_boost, slot);
-}
-
-int do_stune_boost(char *st_name, int boost, int *slot)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	return _do_stune_boost(st, boost, slot);
-}
-
-void set_stune_boost_default(char *st_name, int *boost_default)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	mutex_lock(&stune_boost_mutex);
-	st->boost_default = *boost_default ;
-	mutex_unlock(&stune_boost_mutex);
-}
-
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
-
 /*
  * Initialize the cgroup structures
  */
