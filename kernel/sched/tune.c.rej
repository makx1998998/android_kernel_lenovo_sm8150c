--- kernel/sched/tune.c
+++ kernel/sched/tune.c
@@ -578,71 +538,12 @@ boost_write(struct cgroup_subsys_state *css, struct cftype *cft,
 
 	st->boost = boost;
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-	st->boost_default = boost;
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
 	/* Update CPU boost */
 	schedtune_boostgroup_update(st->idx, st->boost);
 
 	return 0;
 }
 
-#ifdef CONFIG_DYNAMIC_STUNE_BOOST
-static s64
-sched_boost_read(struct cgroup_subsys_state *css, struct cftype *cft)
-{
-	struct schedtune *st = css_st(css);
-
-	return st->sched_boost;
-}
-
-static int
-sched_boost_write(struct cgroup_subsys_state *css, struct cftype *cft,
-	    s64 sched_boost)
-{
-	struct schedtune *st = css_st(css);
-	st->sched_boost = sched_boost;
-
-	return 0;
-}
-
-static void
-boost_slots_init(struct schedtune *st)
-{
-	int i;
-	struct boost_slot *slot;
-
-	/* Initialize boost slots */
-	INIT_LIST_HEAD(&(st->active_boost_slots.list));
-	INIT_LIST_HEAD(&(st->available_boost_slots.list));
-
-	/* Populate available_boost_slots */
-	for (i = 0; i < DYNAMIC_BOOST_SLOTS_COUNT; ++i) {
-		slot = kmalloc(sizeof(*slot), GFP_KERNEL);
-		slot->idx = i;
-		list_add_tail(&(slot->list), &(st->available_boost_slots.list));
-	}
-}
-
-static void
-boost_slots_release(struct schedtune *st)
-{
-	struct boost_slot *slot, *next_slot;
-
-	list_for_each_entry_safe(slot, next_slot,
-				 &(st->available_boost_slots.list), list) {
-		list_del(&slot->list);
-		kfree(slot);
-	}
-	list_for_each_entry_safe(slot, next_slot,
-				 &(st->active_boost_slots.list), list) {
-		list_del(&slot->list);
-		kfree(slot);
-	}
-}
-#endif // CONFIG_DYNAMIC_STUNE_BOOST
-
 static struct cftype files[] = {
 #ifdef CONFIG_SCHED_WALT
 	{
@@ -800,215 +685,16 @@ static struct schedtune *getSchedtune(char *st_name)
 	return NULL;
 }
 
-static int dynamic_boost(struct schedtune *st, int boost)
-{
-	int ret;
-	/* Backup boost_default */
-	int boost_default_backup = st->boost_default;
-
-	ret = boost_write(&st->css, NULL, boost);
-
-	/* Restore boost_default */
-	st->boost_default = boost_default_backup;
-
-	return ret;
-}
-
-static inline bool is_valid_boost_slot(int slot)
-{
-	return slot >= 0 && slot < DYNAMIC_BOOST_SLOTS_COUNT;
-}
-
-static int activate_boost_slot(struct schedtune *st, int boost, int *slot)
-{
-	int ret = 0;
-	struct boost_slot *curr_slot;
-	struct list_head *head;
-	*slot = -1;
-
-	mutex_lock(&boost_slot_mutex);
-
-	/* Check for slots in available_boost_slots */
-	if (list_empty(&(st->available_boost_slots.list))) {
-		ret = -EINVAL;
-		goto exit;
-	}
-
-	/*
-	 * Move one slot from available_boost_slots to active_boost_slots
-	 */
-
-	/* Get first slot from available_boost_slots */
-	head = &(st->available_boost_slots.list);
-	curr_slot = list_first_entry(head, struct boost_slot, list);
-
-	/* Store slot value and boost value*/
-	*slot = curr_slot->idx;
-	st->slot_boost[*slot] = boost;
-
-	/* Delete slot from available_boost_slots */
-	list_del(&curr_slot->list);
-	kfree(curr_slot);
-
-	/* Create new slot with same value at tail of active_boost_slots */
-	curr_slot = kmalloc(sizeof(*curr_slot), GFP_KERNEL);
-	curr_slot->idx = *slot;
-	list_add_tail(&(curr_slot->list),
-		&(st->active_boost_slots.list));
-
-exit:
-	mutex_unlock(&boost_slot_mutex);
-	return ret;
-}
-
-static int deactivate_boost_slot(struct schedtune *st, int slot)
-{
-	int ret = 0;
-	struct boost_slot *curr_slot, *next_slot;
-
-	mutex_lock(&boost_slot_mutex);
-
-	if (!is_valid_boost_slot(slot)) {
-		ret = -EINVAL;
-		goto exit;
-	}
-
-	/* Delete slot from active_boost_slots */
-	list_for_each_entry_safe(curr_slot, next_slot,
-				 &(st->active_boost_slots.list), list) {
-		if (curr_slot->idx == slot) {
-			st->slot_boost[slot] = 0;
-			list_del(&curr_slot->list);
-			kfree(curr_slot);
-
-			/* Create same slot at tail of available_boost_slots */
-			curr_slot = kmalloc(sizeof(*curr_slot), GFP_KERNEL);
-			curr_slot->idx = slot;
-			list_add_tail(&(curr_slot->list),
-				      &(st->available_boost_slots.list));
-
-			goto exit;
-		}
-	}
-
-	/* Reaching here means that we did not find the slot to delete */
-	ret = -EINVAL;
-
-exit:
-	mutex_unlock(&boost_slot_mutex);
-	return ret;
-}
-
-static int max_active_boost(struct schedtune *st)
-{
-	struct boost_slot *slot;
-	int max_boost;
-
-	mutex_lock(&boost_slot_mutex);
-	mutex_lock(&stune_boost_mutex);
-
-	/* Set initial value to default boost */
-	max_boost = st->boost_default;
-
-	/* Check for active boosts */
-	if (list_empty(&(st->active_boost_slots.list))) {
-		goto exit;
-	}
-
-	/* Get largest boost value */
-	list_for_each_entry(slot, &(st->active_boost_slots.list), list) {
-		int boost = st->slot_boost[slot->idx];
-		if (boost > max_boost)
-			max_boost = boost;
-	}
-
-exit:
-	mutex_unlock(&stune_boost_mutex);
-	mutex_unlock(&boost_slot_mutex);
-
-	return max_boost;
-}
-
-static int _do_stune_boost(struct schedtune *st, int boost, int *slot)
-{
-	int ret = 0;
-
-	/* Try to obtain boost slot */
-	ret = activate_boost_slot(st, boost, slot);
-
-	/* Check if boost slot obtained successfully */
-	if (ret)
-		return -EINVAL;
-
-	/* Boost if new value is greater than current */
-	mutex_lock(&stune_boost_mutex);
-	if (boost > st->boost)
-		ret = dynamic_boost(st, boost);
-	mutex_unlock(&stune_boost_mutex);
-
-	return ret;
-}
-
-int reset_stune_boost(char *st_name, int slot)
+void set_stune_boost(char *st_name, int boost)
 {
-	int ret = 0;
-	int boost = 0;
 	struct schedtune *st = getSchedtune(st_name);
 
 	if (!st)
 		return -EINVAL;
 
-	ret = deactivate_boost_slot(st, slot);
-	if (ret) {
-		return -EINVAL;
-	}
-	/* Find next largest active boost or reset to default */
-	boost = max_active_boost(st);
-
-	mutex_lock(&stune_boost_mutex);
-	/* Boost only if value changed */
-	if (boost != st->boost)
-		ret = dynamic_boost(st, boost);
-	mutex_unlock(&stune_boost_mutex);
-
-	return ret;
+	boost_write(&st->css, NULL, boost);
 }
 
-int do_stune_sched_boost(char *st_name, int *slot)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	return _do_stune_boost(st, st->sched_boost, slot);
-}
-
-int do_stune_boost(char *st_name, int boost, int *slot)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	return _do_stune_boost(st, boost, slot);
-}
-
-void set_stune_boost_default(char *st_name, int *boost_default)
-{
-	struct schedtune *st = getSchedtune(st_name);
-
-	if (!st)
-		return -EINVAL;
-
-	mutex_lock(&stune_boost_mutex);
-	st->boost_default = *boost_default ;
-	mutex_unlock(&stune_boost_mutex);
-}
-
-#endif /* CONFIG_DYNAMIC_STUNE_BOOST */
-
-
 /*
  * Initialize the cgroup structures
  */
