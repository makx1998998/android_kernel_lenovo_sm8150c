diff --git a/drivers/devfreq/Kconfig b/drivers/devfreq/Kconfig
index 596bcd02f39e..2a24e0cfd549 100644
--- a/drivers/devfreq/Kconfig
+++ b/drivers/devfreq/Kconfig
@@ -276,6 +276,12 @@ config DEVFREQ_BOOST
 
 if DEVFREQ_BOOST
 
+config FLEX_DEVFREQ_BOOST_DURATION_MS
+	int "Flex boost duration"
+	default "150"
+	help
+	  Flex boost duration in milliseconds for all boostable devices.
+
 config DEVFREQ_INPUT_BOOST_DURATION_MS
 	int "Input boost duration"
 	default "100"
@@ -294,6 +300,11 @@ config DEVFREQ_MSM_CPUBW_BOOST_FREQ
 	help
 	  Boost frequency for the MSM DDR bus.
 
+config DEVFREQ_THREAD_PRIORITY
+	int "Input hread priority"
+	depends on DYNAMIC_STUNE_BOOST
+	default "25"
+
 endif
 
 source "drivers/devfreq/event/Kconfig"
diff --git a/drivers/devfreq/devfreq_boost.c b/drivers/devfreq/devfreq_boost.c
index 4432836046df..4c71b3748d86 100644
--- a/drivers/devfreq/devfreq_boost.c
+++ b/drivers/devfreq/devfreq_boost.c
@@ -5,244 +5,194 @@
 
 #define pr_fmt(fmt) "devfreq_boost: " fmt
 
+#include <linux/cpu.h>
 #include <linux/devfreq_boost.h>
-#include <linux/msm_drm_notify.h>
 #include <linux/input.h>
 #include <linux/slab.h>
+#include <linux/kthread.h>
+#include <linux/moduleparam.h>
+#include <linux/msm_drm_notify.h>
+#include <linux/version.h>
+
+/* The sched_param struct is located elsewhere in newer kernels */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+#include <uapi/linux/sched/types.h>
+#endif
+
+static unsigned short flex_boost_duration __read_mostly = CONFIG_FLEX_DEVFREQ_BOOST_DURATION_MS;
+static unsigned short input_boost_duration __read_mostly = CONFIG_DEVFREQ_INPUT_BOOST_DURATION_MS;
+static unsigned int devfreq_thread_prio __read_mostly = CONFIG_DEVFREQ_THREAD_PRIORITY;
+
+module_param(flex_boost_duration, short, 0644);
+module_param(input_boost_duration, short, 0644);
+
+enum {
+	SCREEN_OFF,
+	INPUT_BOOST,
+	FLEX_BOOST,
+	WAKE_BOOST,
+	MAX_BOOST
+};
 
 struct boost_dev {
-	struct workqueue_struct *wq;
+	struct kthread_worker boost_worker;
+	struct task_struct *boost_worker_thread;
 	struct devfreq *df;
-	struct work_struct input_boost;
-	struct delayed_work input_unboost;
-	struct work_struct max_boost;
-	struct delayed_work max_unboost;
-	unsigned long abs_min_freq;
+	struct kthread_work input_boost;
+	struct kthread_delayed_work input_unboost;
+	struct kthread_work flex_boost;
+	struct kthread_delayed_work flex_unboost;
+	struct kthread_work max_boost;
+	struct kthread_delayed_work max_unboost;
+	unsigned int max_boost_jiffies;
+	unsigned int wake_boost_jiffies;
+	unsigned long state;
 	unsigned long boost_freq;
-	unsigned long max_boost_expires;
-	unsigned long max_boost_jiffies;
-	spinlock_t lock;
+
 };
 
 struct df_boost_drv {
 	struct boost_dev devices[DEVFREQ_MAX];
 	struct notifier_block msm_drm_notif;
-	bool screen_awake;
+	atomic_t screen_awake;
 };
 
 static struct df_boost_drv *df_boost_drv_g __read_mostly;
 
-static void __devfreq_boost_kick(struct boost_dev *b)
+static void devfreq_update_boosts(struct boost_dev *b, unsigned long state)
 {
-	unsigned long flags;
+	struct devfreq *df = b->df;
 
-	spin_lock_irqsave(&b->lock, flags);
-	if (!b->df) {
-		spin_unlock_irqrestore(&b->lock, flags);
-		return;
+	mutex_lock(&df->lock);
+	if (test_bit(SCREEN_OFF, &state)) {
+		df->min_freq = df->profile->freq_table[0];
+		df->max_boost = test_bit(WAKE_BOOST, &state) ? 
+						true :
+						false;
+	} else {
+		df->min_freq = test_bit(INPUT_BOOST, &state) || test_bit(FLEX_BOOST, &state) ?
+			       min(b->boost_freq, df->max_freq) :
+			       df->profile->freq_table[0];
+		df->max_boost = test_bit(MAX_BOOST, &state) || test_bit(WAKE_BOOST, &state);
 	}
-	spin_unlock_irqrestore(&b->lock, flags);
-
-	queue_work(b->wq, &b->input_boost);
+	update_devfreq(df);
+	mutex_unlock(&df->lock);
 }
 
-void devfreq_boost_kick(enum df_device device)
+void devfreq_boost_kick_flex(enum df_device device)
 {
 	struct df_boost_drv *d = df_boost_drv_g;
+	struct boost_dev *b = d->devices + device;
 
-	if (!d)
-		return;
-
-	if (!d->screen_awake)
+	if (!READ_ONCE(b->df) || test_bit(SCREEN_OFF, &b->state))
 		return;
 
-	__devfreq_boost_kick(d->devices + device);
+	set_bit(FLEX_BOOST, &b->state);
+	kthread_queue_work(&b->boost_worker, &b->flex_boost);
 }
 
-static void __devfreq_boost_kick_max(struct boost_dev *b,
-				     unsigned int duration_ms)
+static void devfreq_flex_boost(struct kthread_work *work)
 {
-	unsigned long flags, new_expires;
-
-	spin_lock_irqsave(&b->lock, flags);
-	if (!b->df) {
-		spin_unlock_irqrestore(&b->lock, flags);
-		return;
-	}
+	struct boost_dev *b = container_of(work, typeof(*b), flex_boost);
+	
+	devfreq_update_boosts(b, b->state);
+	kthread_mod_delayed_work(&b->boost_worker, &b->flex_unboost, msecs_to_jiffies(flex_boost_duration));
+}
 
-	new_expires = jiffies + b->max_boost_jiffies;
-	if (time_after(b->max_boost_expires, new_expires)) {
-		spin_unlock_irqrestore(&b->lock, flags);
-		return;
-	}
-	b->max_boost_expires = new_expires;
-	b->max_boost_jiffies = msecs_to_jiffies(duration_ms);
-	spin_unlock_irqrestore(&b->lock, flags);
+static void devfreq_flex_unboost(struct kthread_work *work)
+{
+	struct boost_dev *b = container_of(work, typeof(*b), flex_unboost.work);
 
-	queue_work(b->wq, &b->max_boost);
+	clear_bit(FLEX_BOOST, &b->state);
+	devfreq_update_boosts(b, b->state);
 }
 
 void devfreq_boost_kick_max(enum df_device device, unsigned int duration_ms)
 {
 	struct df_boost_drv *d = df_boost_drv_g;
+	struct boost_dev *b = d->devices + device;
 
-	if (!d)
+	if (!READ_ONCE(b->df) || test_bit(SCREEN_OFF, &b->state))
 		return;
 
-	if (!d->screen_awake)
-		return;
+	set_bit(MAX_BOOST, &b->state);
 
-	__devfreq_boost_kick_max(d->devices + device, duration_ms);
+	b->max_boost_jiffies = msecs_to_jiffies(duration_ms);
+	kthread_queue_work(&b->boost_worker, &b->max_boost);
 }
 
-void devfreq_register_boost_device(enum df_device device, struct devfreq *df)
+static void devfreq_max_boost(struct kthread_work *work)
 {
-	struct df_boost_drv *d = df_boost_drv_g;
-	struct boost_dev *b;
-	unsigned long flags;
-
-	if (!d)
-		return;
-
-	df->is_boost_device = true;
-
-	b = d->devices + device;
-	spin_lock_irqsave(&b->lock, flags);
-	b->df = df;
-	spin_unlock_irqrestore(&b->lock, flags);
+	struct boost_dev *b = container_of(work, typeof(*b), max_boost);
+	
+	devfreq_update_boosts(b, b->state);
+	kthread_mod_delayed_work(&b->boost_worker, &b->max_unboost, b->max_boost_jiffies);
 }
 
-static unsigned long devfreq_abs_min_freq(struct boost_dev *b)
+static void devfreq_max_unboost(struct kthread_work *work)
 {
-	struct devfreq *df = b->df;
-	int i;
+	struct boost_dev *b = container_of(work, typeof(*b), max_unboost.work);
 
-	/* Reuse the absolute min freq found the first time this was called */
-	if (b->abs_min_freq != ULONG_MAX)
-		return b->abs_min_freq;
-
-	/* Find the lowest non-zero freq from the freq table */
-	for (i = 0; i < df->profile->max_state; i++) {
-		unsigned int freq = df->profile->freq_table[i];
+	clear_bit(WAKE_BOOST, &b->state);
+	clear_bit(MAX_BOOST, &b->state);
+	devfreq_update_boosts(b, b->state);
+}
 
-		if (!freq)
-			continue;
+void devfreq_boost_kick_wake(enum df_device device, unsigned int duration_ms)
+{
+	struct df_boost_drv *d = df_boost_drv_g;
+	struct boost_dev *b = d->devices + device;
 
-		if (b->abs_min_freq > freq)
-			b->abs_min_freq = freq;
-	}
+	if (!READ_ONCE(b->df) || !test_bit(SCREEN_OFF, &b->state))
+		return;
 
-	/* Use zero for the absolute min freq if nothing was found */
-	if (b->abs_min_freq == ULONG_MAX)
-		b->abs_min_freq = 0;
+	set_bit(WAKE_BOOST, &b->state);
 
-	return b->abs_min_freq;
+	b->wake_boost_jiffies = msecs_to_jiffies(duration_ms);
+	kthread_queue_work(&b->boost_worker, &b->max_boost);
 }
 
-static void devfreq_unboost_all(struct df_boost_drv *d)
+void devfreq_boost_kick(struct boost_dev *b)
 {
-	int i;
+	if (!READ_ONCE(b->df) || test_bit(SCREEN_OFF, &b->state))
+		return;
 
-	for (i = 0; i < DEVFREQ_MAX; i++) {
-		struct boost_dev *b = d->devices + i;
-		struct devfreq *df;
-		unsigned long flags;
-
-		spin_lock_irqsave(&b->lock, flags);
-		df = b->df;
-		spin_unlock_irqrestore(&b->lock, flags);
-
-		if (!df)
-			continue;
-
-		cancel_work_sync(&b->max_boost);
-		cancel_delayed_work_sync(&b->max_unboost);
-		cancel_work_sync(&b->input_boost);
-		cancel_delayed_work_sync(&b->input_unboost);
-
-		mutex_lock(&df->lock);
-		df->max_boost = false;
-		df->min_freq = devfreq_abs_min_freq(b);
-		update_devfreq(df);
-		mutex_unlock(&df->lock);
-	}
+	set_bit(INPUT_BOOST, &b->state);
+	kthread_queue_work(&b->boost_worker, &b->input_boost);
 }
 
-static void devfreq_input_boost(struct work_struct *work)
+static void devfreq_input_boost(struct kthread_work *work)
 {
 	struct boost_dev *b = container_of(work, typeof(*b), input_boost);
-
-	if (!cancel_delayed_work_sync(&b->input_unboost)) {
-		struct devfreq *df = b->df;
-		unsigned long boost_freq, flags;
-
-		spin_lock_irqsave(&b->lock, flags);
-		boost_freq = b->boost_freq;
-		spin_unlock_irqrestore(&b->lock, flags);
-
-		mutex_lock(&df->lock);
-		if (df->max_freq)
-			df->min_freq = min(boost_freq, df->max_freq);
-		else
-			df->min_freq = boost_freq;
-		update_devfreq(df);
-		mutex_unlock(&df->lock);
-	}
-
-	queue_delayed_work(b->wq, &b->input_unboost,
-		msecs_to_jiffies(CONFIG_DEVFREQ_INPUT_BOOST_DURATION_MS));
-}
-
-static void devfreq_input_unboost(struct work_struct *work)
-{
-	struct boost_dev *b = container_of(to_delayed_work(work),
-					   typeof(*b), input_unboost);
-	struct devfreq *df = b->df;
-
-	mutex_lock(&df->lock);
-	df->min_freq = devfreq_abs_min_freq(b);
-	update_devfreq(df);
-	mutex_unlock(&df->lock);
+	
+	devfreq_update_boosts(b, b->state);
+	kthread_mod_delayed_work(&b->boost_worker, &b->input_unboost, msecs_to_jiffies(input_boost_duration));
 }
 
-static void devfreq_max_boost(struct work_struct *work)
+static void devfreq_input_unboost(struct kthread_work *work)
 {
-	struct boost_dev *b = container_of(work, typeof(*b), max_boost);
-	unsigned long boost_jiffies, flags;
-
-	if (!cancel_delayed_work_sync(&b->max_unboost)) {
-		struct devfreq *df = b->df;
-
-		mutex_lock(&df->lock);
-		df->max_boost = true;
-		update_devfreq(df);
-		mutex_unlock(&df->lock);
-	}
-
-	spin_lock_irqsave(&b->lock, flags);
-	boost_jiffies = b->max_boost_jiffies;
-	spin_unlock_irqrestore(&b->lock, flags);
+	struct boost_dev *b = container_of(work, typeof(*b), input_unboost.work);
 
-	queue_delayed_work(b->wq, &b->max_unboost, boost_jiffies);
+	clear_bit(INPUT_BOOST, &b->state);
+	devfreq_update_boosts(b, b->state);
 }
 
-static void devfreq_max_unboost(struct work_struct *work)
+void devfreq_register_boost_device(enum df_device device, struct devfreq *df)
 {
-	struct boost_dev *b = container_of(to_delayed_work(work),
-					   typeof(*b), max_unboost);
-	struct devfreq *df = b->df;
+	struct df_boost_drv *d = df_boost_drv_g;
+	struct boost_dev *b;
 
-	mutex_lock(&df->lock);
-	df->max_boost = false;
-	update_devfreq(df);
-	mutex_unlock(&df->lock);
+	df->is_boost_device = true;
+	b = d->devices + device;
+	WRITE_ONCE(b->df, df);
 }
 
-static int msm_drm_notifier_cb(struct notifier_block *nb,
-			       unsigned long action, void *data)
+static int msm_drm_notifier_cb(struct notifier_block *nb, unsigned long action,
+			       void *data)
 {
 	struct df_boost_drv *d = container_of(nb, typeof(*d), msm_drm_notif);
 	struct msm_drm_notifier *evdata = data;
+	int i;
 	int *blank = evdata->data;
 
 	/* Parse framebuffer blank events as soon as they occur */
@@ -250,15 +200,16 @@ static int msm_drm_notifier_cb(struct notifier_block *nb,
 		return NOTIFY_OK;
 
 	/* Boost when the screen turns on and unboost when it turns off */
-	d->screen_awake = *blank == MSM_DRM_BLANK_UNBLANK;
-	if (d->screen_awake) {
-		int i;
+	for (i = 0; i < DEVFREQ_MAX; i++) {
+		struct boost_dev *b = d->devices + i;
 
-		for (i = 0; i < DEVFREQ_MAX; i++)
-			__devfreq_boost_kick_max(d->devices + i,
-				CONFIG_DEVFREQ_WAKE_BOOST_DURATION_MS);
-	} else {
-		devfreq_unboost_all(d);
+		if (*blank == MSM_DRM_BLANK_UNBLANK_CUST) {
+			devfreq_boost_kick_wake(DEVFREQ_MSM_CPUBW, 500);
+			clear_bit(SCREEN_OFF, &b->state);
+		} else {
+			set_bit(SCREEN_OFF, &b->state);
+			devfreq_update_boosts(b, b->state);
+		}
 	}
 
 	return NOTIFY_OK;
@@ -271,11 +222,8 @@ static void devfreq_boost_input_event(struct input_handle *handle,
 	struct df_boost_drv *d = handle->handler->private;
 	int i;
 
-	if (!d->screen_awake)
-		return;
-
 	for (i = 0; i < DEVFREQ_MAX; i++)
-		__devfreq_boost_kick(d->devices + i);
+		devfreq_boost_kick(d->devices + i);
 }
 
 static int devfreq_boost_input_connect(struct input_handler *handler,
@@ -353,30 +301,42 @@ static struct input_handler devfreq_boost_input_handler = {
 
 static int __init devfreq_boost_init(void)
 {
+	static struct sched_param sched_max_rt_prio;
 	struct df_boost_drv *d;
-	struct workqueue_struct *wq;
 	int i, ret;
 
+	if (devfreq_thread_prio == 99)
+ 		sched_max_rt_prio.sched_priority = MAX_RT_PRIO - 1;
+	else 
+		sched_max_rt_prio.sched_priority = devfreq_thread_prio;
+
 	d = kzalloc(sizeof(*d), GFP_KERNEL);
 	if (!d)
 		return -ENOMEM;
 
-	wq = alloc_workqueue("devfreq_boost_wq", WQ_HIGHPRI, 0);
-	if (!wq) {
-		ret = -ENOMEM;
-		goto free_d;
-	}
-
 	for (i = 0; i < DEVFREQ_MAX; i++) {
-		struct boost_dev *b = d->devices + i;
-
-		b->wq = wq;
-		b->abs_min_freq = ULONG_MAX;
-		spin_lock_init(&b->lock);
-		INIT_WORK(&b->input_boost, devfreq_input_boost);
-		INIT_DELAYED_WORK(&b->input_unboost, devfreq_input_unboost);
-		INIT_WORK(&b->max_boost, devfreq_max_boost);
-		INIT_DELAYED_WORK(&b->max_unboost, devfreq_max_unboost);
+		struct boost_dev *b = d->devices + i;	
+		b->state = 0;
+		clear_bit(SCREEN_OFF, &b->state);
+		kthread_init_worker(&b->boost_worker);
+		b->boost_worker_thread = kthread_run_low_power(kthread_worker_fn, &b->boost_worker,
+				       "def_freq_boost_thread_%d",i);
+		if (IS_ERR(b->boost_worker_thread)) {
+			ret = PTR_ERR(b->boost_worker_thread);
+			pr_err("Failed to start kworker, err: %d\n", ret);
+			kthread_destroy_worker(&b->boost_worker);
+		}
+
+		ret = sched_setscheduler(b->boost_worker_thread, SCHED_FIFO, &sched_max_rt_prio);
+		if (ret)
+			pr_err("Failed to set SCHED_FIFO on kworker, err: %d\n", ret);
+
+		kthread_init_work(&b->input_boost, devfreq_input_boost);
+		kthread_init_delayed_work(&b->input_unboost, devfreq_input_unboost);
+		kthread_init_work(&b->flex_boost, devfreq_flex_boost);
+		kthread_init_delayed_work(&b->flex_unboost, devfreq_flex_unboost);
+		kthread_init_work(&b->max_boost, devfreq_max_boost);
+		kthread_init_delayed_work(&b->max_unboost, devfreq_max_unboost);
 	}
 
 	d->devices[DEVFREQ_MSM_CPUBW].boost_freq =
@@ -386,14 +346,13 @@ static int __init devfreq_boost_init(void)
 	ret = input_register_handler(&devfreq_boost_input_handler);
 	if (ret) {
 		pr_err("Failed to register input handler, err: %d\n", ret);
-		goto destroy_wq;
 	}
 
 	d->msm_drm_notif.notifier_call = msm_drm_notifier_cb;
 	d->msm_drm_notif.priority = INT_MAX;
 	ret = msm_drm_register_client(&d->msm_drm_notif);
 	if (ret) {
-		pr_err("Failed to register msm_drm notifier, err: %d\n", ret);
+		pr_err("Failed to register dsi_panel_notifier, err: %d\n", ret);
 		goto unregister_handler;
 	}
 
@@ -403,10 +362,5 @@ static int __init devfreq_boost_init(void)
 
 unregister_handler:
 	input_unregister_handler(&devfreq_boost_input_handler);
-destroy_wq:
-	destroy_workqueue(wq);
-free_d:
-	kfree(d);
-	return ret;
 }
 subsys_initcall(devfreq_boost_init);
diff --git a/include/linux/devfreq_boost.h b/include/linux/devfreq_boost.h
index d50759a2bfc6..3764dab6f177 100644
--- a/include/linux/devfreq_boost.h
+++ b/include/linux/devfreq_boost.h
@@ -1,5 +1,5 @@
-/* SPDX-License-Identifier: GPL-2.0
- *
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
  * Copyright (C) 2018-2019 Sultan Alsawaf <sultan@kerneltoast.com>.
  */
 #ifndef _DEVFREQ_BOOST_H_
@@ -13,12 +13,13 @@ enum df_device {
 };
 
 #ifdef CONFIG_DEVFREQ_BOOST
-void devfreq_boost_kick(enum df_device device);
+void devfreq_boost_kick_flex(enum df_device device);
 void devfreq_boost_kick_max(enum df_device device, unsigned int duration_ms);
+void devfreq_boost_kick_wake(enum df_device device, unsigned int duration_ms);
 void devfreq_register_boost_device(enum df_device device, struct devfreq *df);
 #else
 static inline
-void devfreq_boost_kick(enum df_device device)
+void devfreq_boost_kick_flex(enum df_device device)
 {
 }
 static inline
@@ -26,6 +27,10 @@ void devfreq_boost_kick_max(enum df_device device, unsigned int duration_ms)
 {
 }
 static inline
+void devfreq_boost_kick_wake(enum df_device device, unsigned int duration_ms)
+{
+}
+static inline
 void devfreq_register_boost_device(enum df_device device, struct devfreq *df)
 {
 }
