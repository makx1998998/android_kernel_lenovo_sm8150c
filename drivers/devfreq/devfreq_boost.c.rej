--- drivers/devfreq/devfreq_boost.c
+++ drivers/devfreq/devfreq_boost.c
@@ -343,63 +243,68 @@ static struct input_handler devfreq_boost_input_handler = {
 
 static int __init devfreq_boost_init(void)
 {
-	struct df_boost_drv *d;
-	struct workqueue_struct *wq;
+	struct df_boost_drv *d = &df_boost_drv_g;
+	struct task_struct *thread[DEVFREQ_MAX];
+	struct workqueue_struct *wq_i;
+	struct workqueue_struct *wq_f;
+	struct workqueue_struct *wq_m;
 	int i, ret;
-
-	d = kzalloc(sizeof(*d), GFP_KERNEL);
-	if (!d)
-		return -ENOMEM;
-
-	wq = alloc_workqueue("devfreq_boost_wq", WQ_HIGHPRI, 0);
-	if (!wq) {
+	
+	wq_i = alloc_workqueue("devfreq_boost_wq_i", WQ_HIGHPRI, 0);
+	if (!wq_i) {
 		ret = -ENOMEM;
-		goto free_d;
+		return ret;
+	}
+	
+	wq_f = alloc_workqueue("devfreq_boost_wq_f", WQ_HIGHPRI, 0);
+	if (!wq_f) {
+		ret = -ENOMEM;
+		return ret;
+	}
+	
+	wq_m = alloc_workqueue("devfreq_boost_wq_m", WQ_HIGHPRI, 0);
+	if (!wq_m) {
+		ret = -ENOMEM;
+		return ret;
 	}
-
-	atomic_set(&d->screen_awake, screen_awake);
 
 	for (i = 0; i < DEVFREQ_MAX; i++) {
 		struct boost_dev *b = d->devices + i;
-		b->wq = wq;
-		b->abs_min_freq = ULONG_MAX;
-		spin_lock_init(&b->lock);
-		INIT_WORK(&b->input_boost, devfreq_input_boost);
-		INIT_DELAYED_WORK(&b->input_unboost, devfreq_input_unboost);
-		INIT_WORK(&b->flex_boost, devfreq_flex_boost);
-		INIT_DELAYED_WORK(&b->flex_unboost, devfreq_flex_unboost);
-		INIT_WORK(&b->max_boost, devfreq_max_boost);
-		INIT_DELAYED_WORK(&b->max_unboost, devfreq_max_unboost);
+		b->wq_i = wq_i;
+		b->wq_f = wq_f;
+		b->wq_m = wq_m;
+		
+		thread[i] = kthread_run_low_power(devfreq_boost_thread, b,
+						      "devfreq_boostd/%d", i);
+		if (IS_ERR(thread[i])) {
+			ret = PTR_ERR(thread[i]);
+			pr_err("Failed to create kthread, err: %d\n", ret);
+			goto stop_kthreads;
+		}
 	}
 
-	d->devices[DEVFREQ_MSM_CPUBW].boost_freq =
-		CONFIG_DEVFREQ_MSM_CPUBW_BOOST_FREQ;
-
 	devfreq_boost_input_handler.private = d;
 	ret = input_register_handler(&devfreq_boost_input_handler);
 	if (ret) {
 		pr_err("Failed to register input handler, err: %d\n", ret);
-		goto destroy_wq;
+		goto stop_kthreads;
 	}
 
 	d->msm_drm_notif.notifier_call = msm_drm_notifier_cb;
-	d->msm_drm_notif.priority = INT_MAX;
+	d->msm_drm_notif.priority = INT_MAX-2;
 	ret = msm_drm_register_client(&d->msm_drm_notif);
 	if (ret) {
-		pr_err("Failed to register dsi_panel_notifier, err: %d\n", ret);
+		pr_err("Failed to register msm_drm_notifier, err: %d\n", ret);
 		goto unregister_handler;
 	}
 
-	df_boost_drv_g = d;
-
 	return 0;
 
 unregister_handler:
 	input_unregister_handler(&devfreq_boost_input_handler);
-destroy_wq:
-	destroy_workqueue(wq);
-free_d:
-	kfree(d);
+stop_kthreads:
+	while (i--)
+		kthread_stop(thread[i]);
 	return ret;
 }
-subsys_initcall(devfreq_boost_init);
+late_initcall_sync(devfreq_boost_init);
